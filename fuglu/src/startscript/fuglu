#!/usr/bin/env python

#   Copyright 2009 Oli Schacher
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# $Id: fuglu 20 2009-04-16 04:47:44Z oli $
#
#fuglu main startup file

#update this one for new releases
FUGLU_VERSION="0.4.1svn"

import ConfigParser
from fuglu.daemon import DaemonStuff
import logging
import logging.config
import fuglu.funkyconsole
import sys
from fuglu.core import MainController,VERSION
import signal
import os
import pwd
import grp

controller=None

fugluconfigfile='/etc/fuglu/fuglu.conf'
dconfdir='/etc/fuglu/conf.d'
fugluloggingfile='/etc/fuglu/logging.conf'


def reloadconfig():
    """reload configuration file"""
    logger=logging.getLogger('fuglu')
    logger.info('Reloading configuration')
    global globalconfig
    newconfig=ConfigParser.ConfigParser()
    newconfig.readfp(open(fugluconfigfile))
    
    identifier="no identifier given"
    if newconfig.has_option('main', 'identifier'):
        identifier=newconfig.get('main','identifier')
    
    #load conf.d
    if os.path.isdir(dconfdir):
        filelist=os.listdir(dconfdir)
        configfiles=[dconfdir+'/'+c for c in filelist if c.endswith('.conf')]
        logger.debug('Conffiles in %s: %s'%(dconfdir,configfiles))
        readfiles=newconfig.read(configfiles)
        logger.debug('Read additional files: %s'%(readfiles))
        
    logger.info('Reload config complete. Current configuration:%s'%identifier)
    controller.config=newconfig
    
    logger.info('Reloading plugins...')
    ok=controller.load_plugins()
    if ok:
        logger.info('Plugin reload completed')
    else:
        logger.error('Plugin reload failed')
    
    controller.reload()

def sighup(signum,frame):
    """handle sighup to reload config"""
    reloadconfig()

lint=False
debugmsg=False

for arg in sys.argv:
    if arg=="--lint":
        lint=True
        
    if arg=="--version":
        print "Fuglu Version %s"%FUGLU_VERSION
        sys.exit(0)
    

config=ConfigParser.ConfigParser()
if not os.path.exists(fugluconfigfile):
    print """Configfile (%s) not found. Please create it by renaming the .dist file and modifying it to your needs"""%fugluconfigfile
    sys.exit(1)
readconfig=config.readfp(open(fugluconfigfile))
#load conf.d
if os.path.isdir(dconfdir):
    filelist=os.listdir(dconfdir)
    configfiles=[dconfdir+'/'+c for c in filelist if c.endswith('.conf')]
    readfiles=config.read(configfiles)

if config.getboolean('main', 'daemonize')and not lint:
    daemon=DaemonStuff('/var/run/fuglu.pid')
    daemon.createDaemon()
if lint:
    # define a Handler which writes INFO messages or higher to the sys.stderr
    console = logging.StreamHandler()
    console.setLevel(logging.DEBUG)
    # set a format which is simpler for console use
    formatter = logging.Formatter('%(name)-12s: %(levelname)-8s %(message)s')
    # tell the handler to use this format
    console.setFormatter(formatter)
    # add the handler to the root logger
    logging.getLogger('').addHandler(console)
    fc=fuglu.funkyconsole.FunkyConsole()
    print fc.strcolor("Fuglu", "yellow"),
    print fc.strcolor(VERSION, "green")
    print "----------",fc.strcolor("LINT MODE", (fc.MODE["blink"],fc.FG["magenta"])),"----------"

else:
    logging.config.fileConfig(fugluloggingfile)


#drop privileges
baselogger=logging.getLogger('')
baselogger.info("FuGLU Version %s starting up"%FUGLU_VERSION)

starting_uid = os.getuid()
starting_gid = os.getgid()
starting_uid_name = pwd.getpwuid(starting_uid).pw_name
starting_gid_name = grp.getgrgid(starting_gid).gr_name

try:
    running_user=config.get('main','user')
    running_group=config.get('main','group')
except:
    running_user='nobody'
    running_group='nobody'

try:
    running_uid = pwd.getpwnam(running_user).pw_uid
    running_gid = grp.getgrnam(running_group).gr_gid
except:
    baselogger.error('Can not drop privileges, user %s or group %s does not exist'%(running_user,running_group))
    sys.exit(1)
new_umask=077
old_umask = os.umask(new_umask)
baselogger.info('Dropping Privileges. Before: %s(%s)/%s(%s) After: %s(%s)/%s(%s)'%(starting_uid_name,
                                                                                                     starting_uid,
                                                                                                     starting_gid_name,
                                                                                                     starting_gid,
                                                                                                     running_user,
                                                                                                     running_uid,
                                                                                                     running_group,
                                                                                                     running_gid,
                                                                                                     ))
try:
    os.setgid(running_gid)
    os.setuid(running_uid)
except OSError,e:
    baselogger.error('Could not set effective uid/gid: %s'%e)
    sys.exit(1)



controller=MainController(config)
if lint:
    controller.lint()
else:
    signal.signal(signal.SIGHUP, sighup)
    controller.startup()


