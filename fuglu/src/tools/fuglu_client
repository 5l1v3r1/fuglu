#!/usr/bin/env python

#   Copyright 2009-2017 Oli Schacher
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


# This tool is used to filter messages in fuglu from the command line
from __future__ import print_function

import argparse
from fuglu.scansession import SessionHandler
from fuglu.protocolbase import ProtocolHandler
from fuglu.core import MainController
from fuglu.shared import Suspect
from fuglu.connectors.smtpconnector import buildmsgsource
import sys
import os
import tempfile
import logging

try:
    import configparser
except ImportError:
    import ConfigParser as configparser

class DummySocket(object):
    def __init__(self):
        pass

    def getsockname(self):
        return '',0

class ConsoleConnector(ProtocolHandler):
    protoname = 'CONSOLE'

    def __init__(self, options):
        self.options = options
        self.socket = DummySocket()

    def get_suspect(self):
        (handle, tempfilename) = tempfile.mkstemp(
            prefix='fuglu')

        fd = os.fdopen(handle, 'w+b')
        input = self.options.input
        if input=='-':
            stream = sys.stdin
        else:
            stream = open(input,'r')
        content = stream.read()
        fd.write(content)

        fd.close()
        fromaddr = "unknown@example.org"
        toaddr = "unknown@example.org"
        suspect = Suspect(fromaddr, toaddr, tempfilename)
        suspect.recipients = [toaddr, ]
        return suspect

    def commitback(self, suspect):
        msgcontent = buildmsgsource(suspect)
        print(msgcontent)
        sys.stderr.write('DUNNO\n')

    def defer(self, reason):
        sys.stderr.write("DEFER\n")

    def discard(self, reason):
        sys.stderr.write("DISCARD\n")

    def reject(self, reason):
        sys.stderr.write("REJECT\n")


class ConsoleInterface(object):

    def __init__(self, options):
        self.options = options


    def direct(self):

        config = configparser.RawConfigParser()
        if not os.path.exists(theconfigfile):
            print(
                """Configfile (%s) not found. Please create it by renaming the .dist file and modifying it to your needs""" % theconfigfile)
            sys.exit(1)
        with open(theconfigfile) as fp:
            config.readfp(fp)
        # load conf.d
        if dconfdir and os.path.isdir(dconfdir):
            filelist = os.listdir(dconfdir)
            configfiles = [dconfdir + '/' + c for c in filelist if c.endswith('.conf')]
            config.read(configfiles)

        controller = MainController(config)
        controller.propagate_core_defaults()
        controller.load_extensions()
        controller.load_plugins()


        connector = ConsoleConnector(options)

        appenders = []
        if self.options.appenders:
            appenders = controller.appenders
        session = SessionHandler(connector, config, controller.prependers, controller.plugins, appenders)
        session.handlesession()

    def netcat(self):
        pass



theconfigfile = '/etc/fuglu/fuglu.conf'
dconfdir = '/etc/fuglu/conf.d'


def doit(options):
    interface = ConsoleInterface(options)
    if options.direct:
        interface.direct()
    else:
        interface.netcat()


if __name__=='__main__':
    logging.basicConfig(level=logging.INFO)
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input", default="-", help="message input file. - for stdin")
    parser.add_argument("-s", "--sender", default="-", help="envelope sender, leave empty to auto detect")
    parser.add_argument("-r", "--recipient", default="-", help="envelope recipient, leave empty to auto detect")
    parser.add_argument("--host", default="localhost", help="host where fuglu daemon is running")
    parser.add_argument("-p", "--port", default="port", help="port on which the netcat connector is listening")
    parser.add_argument("-d", "--direct", action="store_true",
                        help="don't connect to a running fuglu, start your own scanning process")
    parser.add_argument("-a", "--appenders", action="store_true",
                        help="run appenders in direct mode as well. Only used when -d is used")
    parser.add_argument("-e", "--exitcodes", action="store_true",
                        help="exit >0 to indicate a message was DEFERRED or REJECTED")

    options = parser.parse_args()

    doit(options)